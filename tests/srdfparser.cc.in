// Copyright (c) 2014, LAAS-CNRS
// Authors: Joseph Mirabel (joseph.mirabel@laas.fr)
//
// This file is part of hpp-manipulation-urdf.
// hpp-manipulation-urdf is free software: you can redistribute it
// and/or modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation, either version
// 3 of the License, or (at your option) any later version.
//
// hpp-manipulation-urdf is distributed in the hope that it will be
// useful, but WITHOUT ANY WARRANTY; without even the implied warranty
// of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Lesser Public License for more details.  You should have
// received a copy of the GNU Lesser General Public License along with
// hpp-manipulation-urdf. If not, see <http://www.gnu.org/licenses/>.

#define BOOST_TEST_MODULE Parser
#include <boost/test/included/unit_test.hpp>

#include <hpp/util/debug.hh>
#include "hpp/manipulation/parser/parser.hh"
#include "hpp/manipulation/srdf/factories.hh"

using namespace hpp::manipulation::srdf;
using namespace hpp::manipulation::parser;

class Test {
  public:
    int i;
    double d;
    std::string name;
};

class TestDFactory : public SequenceFactory <double> {
  public:
    static ObjectFactory* create (ObjectFactory* parent = NULL, const XMLElement* element = NULL)
    {
      return new TestDFactory (parent, element);
    }

  protected:
    TestDFactory (ObjectFactory* parent, const XMLElement* element)
      : SequenceFactory <double> (parent, element, 1) {}
};

class TestFactory : public ObjectFactory {
  public:
    static ObjectFactory* create (ObjectFactory* parent = NULL, const XMLElement* element = NULL)
    {
      return new TestFactory (parent, element);
    }

    /// Called for each attribute
    virtual void impl_setAttribute (const XMLAttribute* attr)
    {
      if (strcmp (attr->Name (), "othername") == 0)
        obj_.name = attr->ValueStr ();
    }

    virtual void finishTags () {
     ObjectFactory* o (NULL);
     if (!getChildOfType ("tag1", o)) {
       // There is more than one tag <position>
       // o is a pointer to the first one.
     }
     TestDFactory* sf = o->as <TestDFactory > ();
     obj_.d = sf->values ().front ();
    }

    Test* object ()
    {
      return &obj_;
    }

  protected:
    TestFactory (ObjectFactory* parent, const XMLElement* element) :
          ObjectFactory (parent, element) {}

  private:
    Test obj_;
};

BOOST_AUTO_TEST_CASE (testparser)
{
  Parser p (false);
  p.addObjectFactory ("test", TestFactory::create);
  p.addObjectFactory ("tag1", TestDFactory::create);
  p.parseFile ("@CMAKE_SOURCE_DIR@/tests/ressources/basic.srdf", hpp::manipulation::DevicePtr_t());
  
  std::cout << p;
}

BOOST_AUTO_TEST_CASE (srdfparser)
{
  Parser p (false);
  p.addObjectFactory ("handle", create <HandleFactory>);
  p.addObjectFactory ("local_position", create <PositionFactory>);
  p.parseFile ("@CMAKE_SOURCE_DIR@/tests/ressources/box.srdf", hpp::manipulation::DevicePtr_t());

  std::cout << p;
}
